{{
  var makeError = require('../compile/error');
  var $errInfo;
}}

{{## def._error2:_rule:
  {{= makeError(_rule, it.util.copy({
    $isData: $isData,
    $schema: $schema,
    $schemaValue: $schemaValue,
    $errorKeyword: $errorKeyword, /* maybe on calling side */
    $errSchemaPath: $errSchemaPath,
    $data: $data,
    opts: it.opts,
    createErrors: it.createErrors,
    errorPath: it.errorPath,
    schemaPath: it.schemaPath
  }, $errInfo)) }}
#}}


{{## def._addError2:_rule:
  if (vErrors === null) vErrors = [err];
  else vErrors.push(err);
  errors++;
#}}


{{## def.addError2:_rule:
  var err = {{# def._error:_rule }};
  {{# def._addError2:_rule }}
#}}


{{## def.error2:_rule:
  {{ var $returnErr = !it.compositeRule && $breakOnError; }}
  {{?$returnErr}}
    validate.errors = [
  {{??}}
    var err =
  {{?}}

  {{# def._error2:_rule }}

  {{?$returnErr}}
    ];
    return false;
  {{??}}
    ;
    {{# def._addError2:_rule }}
  {{?}}
#}}


{{## def.checkError2:_rule:
  if (!{{=$valid}}) {
    {{# def.error2:_rule }}
  }
#}}
